
bin\Debug\zevensegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000029a  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  00000331  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000040  00000000  00000000  00000388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_pubnames 0000001d  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000d8d  00000000  00000000  000003e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000c67  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000002e4  00000000  00000000  00001dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000094  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000059d  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000000e7  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 33 01 	call	0x266	; 0x266 <main>
  f8:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <init>:
#define D7  0xF8
#define D8  0x80
#define D9  0x90

void init (void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62

00000108 <.Loc.1>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
    DDRH |= (1<<SDI);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	fc 01       	movw	r30, r24
 10e:	20 81       	ld	r18, Z
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	91 e0       	ldi	r25, 0x01	; 1

00000114 <.Loc.2>:
 114:	20 62       	ori	r18, 0x20	; 32
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18

0000011a <.Loc.3>:
    DDRH |= (1<<Shift_Clk);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	fc 01       	movw	r30, r24
 120:	20 81       	ld	r18, Z
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	91 e0       	ldi	r25, 0x01	; 1

00000126 <.Loc.4>:
 126:	20 61       	ori	r18, 0x10	; 16
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18

0000012c <.Loc.5>:
    DDRG |= (1<<Latch_Clk);
 12c:	83 e3       	ldi	r24, 0x33	; 51
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	20 81       	ld	r18, Z
 134:	83 e3       	ldi	r24, 0x33	; 51
 136:	90 e0       	ldi	r25, 0x00	; 0

00000138 <.Loc.6>:
 138:	20 62       	ori	r18, 0x20	; 32
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18

0000013e <.Loc.7>:

	// Maak shiftclk en latchclk laag
	PORTH &= ~(1<<Shift_Clk);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	fc 01       	movw	r30, r24
 144:	20 81       	ld	r18, Z

00000146 <.Loc.8>:
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	91 e0       	ldi	r25, 0x01	; 1

0000014a <.Loc.9>:
 14a:	2f 7e       	andi	r18, 0xEF	; 239
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18

00000150 <.Loc.10>:
    PORTG &= ~(1<<Latch_Clk);
 150:	84 e3       	ldi	r24, 0x34	; 52
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	20 81       	ld	r18, Z

00000158 <.Loc.11>:
 158:	84 e3       	ldi	r24, 0x34	; 52
 15a:	90 e0       	ldi	r25, 0x00	; 0

0000015c <.Loc.12>:
 15c:	2f 7d       	andi	r18, 0xDF	; 223
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18

00000162 <.Loc.13>:
}
 162:	00 00       	nop
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <send_data>:

void send_data(char data)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <L0^A>

00000170 <L0^A>:
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	8b 83       	std	Y+3, r24	; 0x03

00000176 <.Loc.15>:
	// Herhaal voor alle bits in een char
	int i;
    for(i = 0; i < 8; i++)
 176:	1a 82       	std	Y+2, r1	; 0x02
 178:	19 82       	std	Y+1, r1	; 0x01

0000017a <.Loc.16>:
 17a:	40 c0       	rjmp	.+128    	; 0x1fc <.L3>

0000017c <.L6>:
	{
	    if (data & (1<< (7-i)))
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	08 2e       	mov	r0, r24
 180:	00 0c       	add	r0, r0
 182:	99 0b       	sbc	r25, r25

00000184 <.Loc.18>:
 184:	47 e0       	ldi	r20, 0x07	; 7
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	3a 81       	ldd	r19, Y+2	; 0x02
 18c:	ba 01       	movw	r22, r20
 18e:	62 1b       	sub	r22, r18
 190:	73 0b       	sbc	r23, r19
 192:	9b 01       	movw	r18, r22

00000194 <.Loc.19>:
 194:	02 2e       	mov	r0, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <.L2^B1>

00000198 <.L1^B1>:
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24

0000019c <.L2^B1>:
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <.L1^B1>
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	99 27       	eor	r25, r25

000001a4 <.Loc.20>:
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	51 f0       	breq	.+20     	; 0x1bc <.L4>

000001a8 <.Loc.21>:
        {
            PORTH |= (1<<SDI);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 81       	ld	r18, Z
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	91 e0       	ldi	r25, 0x01	; 1

000001b4 <.Loc.22>:
 1b4:	20 62       	ori	r18, 0x20	; 32
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <.L5>

000001bc <.L4>:
        }
        else
        {
            PORTH &= ~(1<<SDI);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 81       	ld	r18, Z

000001c4 <.Loc.24>:
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	91 e0       	ldi	r25, 0x01	; 1

000001c8 <.Loc.25>:
 1c8:	2f 7d       	andi	r18, 0xDF	; 223
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18

000001ce <.L5>:
        }
        PORTH |= (1<<Shift_Clk);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 81       	ld	r18, Z
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	91 e0       	ldi	r25, 0x01	; 1

000001da <.Loc.27>:
 1da:	20 61       	ori	r18, 0x10	; 16
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18

000001e0 <.Loc.28>:
        PORTH &= ~(1<<Shift_Clk);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 81       	ld	r18, Z

000001e8 <.Loc.29>:
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	91 e0       	ldi	r25, 0x01	; 1

000001ec <.Loc.30>:
 1ec:	2f 7e       	andi	r18, 0xEF	; 239
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18

000001f2 <.Loc.31>:
    for(i = 0; i < 8; i++)
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	9a 83       	std	Y+2, r25	; 0x02
 1fa:	89 83       	std	Y+1, r24	; 0x01

000001fc <.L3>:
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	91 05       	cpc	r25, r1
 204:	09 f0       	breq	.+2      	; 0x208 <L0^A>

00000206 <L0^A>:
 206:	0c f4       	brge	.+2      	; 0x20a <.Loc.33>

00000208 <L0^A>:
 208:	b9 cf       	rjmp	.-142    	; 0x17c <.L6>

0000020a <.Loc.33>:
		// wil sturen
		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	}
}
 20a:	00 00       	nop
 20c:	00 00       	nop
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <display>:

void display(char data, char disp)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	0f 92       	push	r0
 220:	0f 92       	push	r0
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	6a 83       	std	Y+2, r22	; 0x02

0000022a <.Loc.35>:
	send_data(data);
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	0e 94 b5 00 	call	0x16a	; 0x16a <send_data>

00000230 <.Loc.36>:
	send_data(disp);
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	0e 94 b5 00 	call	0x16a	; 0x16a <send_data>

00000236 <.Loc.37>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	PORTG |= (1<< Latch_Clk);
 236:	84 e3       	ldi	r24, 0x34	; 52
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	20 81       	ld	r18, Z
 23e:	84 e3       	ldi	r24, 0x34	; 52
 240:	90 e0       	ldi	r25, 0x00	; 0

00000242 <.Loc.38>:
 242:	20 62       	ori	r18, 0x20	; 32
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18

00000248 <.Loc.39>:
    PORTG &= ~(1<< Latch_Clk);
 248:	84 e3       	ldi	r24, 0x34	; 52
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	20 81       	ld	r18, Z

00000250 <.Loc.40>:
 250:	84 e3       	ldi	r24, 0x34	; 52
 252:	90 e0       	ldi	r25, 0x00	; 0

00000254 <.Loc.41>:
 254:	2f 7d       	andi	r18, 0xDF	; 223
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18

0000025a <.Loc.42>:
}
 25a:	00 00       	nop
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <main>:

int main(void)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62

0000026e <.Loc.44>:
	init();
 26e:	0e 94 80 00 	call	0x100	; 0x100 <init>

00000272 <.L9>:

	while(1)
	{
	    display(LSP, 0x01);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	0e 94 0d 01 	call	0x21a	; 0x21a <display>

0000027a <.Loc.46>:
	    display(D4, 0x02);
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	89 e9       	ldi	r24, 0x99	; 153
 27e:	0e 94 0d 01 	call	0x21a	; 0x21a <display>

00000282 <.Loc.47>:
	    display(D2, 0x04);
 282:	64 e0       	ldi	r22, 0x04	; 4
 284:	84 ea       	ldi	r24, 0xA4	; 164
 286:	0e 94 0d 01 	call	0x21a	; 0x21a <display>

0000028a <.Loc.48>:
	    display(D0, 0x08);
 28a:	68 e0       	ldi	r22, 0x08	; 8
 28c:	80 ec       	ldi	r24, 0xC0	; 192
 28e:	0e 94 0d 01 	call	0x21a	; 0x21a <display>

00000292 <.Loc.49>:
	    display(LSP, 0x01);
 292:	00 00       	nop
 294:	ee cf       	rjmp	.-36     	; 0x272 <.L9>

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
